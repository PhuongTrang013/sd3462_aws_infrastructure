pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS_ID = '905418472653'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-credentials-id'
        KUBE_NAMESPACE = 'ingress-nginx'
        ECR_REPO = '905418472653.dkr.ecr.us-east-1.amazonaws.com/practical-devops'
        EKS_NAME = 'devops-eks'
    }
   
    stages {
        stage('Create Namespace on EKS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}", region: AWS_REGION)]) {
                        sh "aws eks update-kubeconfig --region $AWS_REGION --name $EKS_NAME"

                        withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIALS_ID}", variable: 'KUBECONFIG')]) {
                            sh "kubectl create namespace ${KUBE_NAMESPACE} || echo 'Namespace already exists'"
                        }
                    }
                }
            }
        }

        stage('Update Image Tag') {
            steps {
                script {
                    sh """
                    # Update image tag in the manifest files
                    find ${env.WORKSPACE}/eks-deploy/manifest/deploy -type f -name '*.yaml' -exec sed -i 's|image: ${ECR_REPO}:.*|image: ${ECR_REPO}:${IMAGE_TAG}|g' {} +
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}", region: AWS_REGION)]) {
                        sh "aws eks update-kubeconfig --region $AWS_REGION --name $EKS_NAME"

                        withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIALS_ID}", variable: 'KUBECONFIG')]) {
                            sh "kubectl apply -f ${env.WORKSPACE}/eks-deploy/manifest/deploy --namespace=${KUBE_NAMESPACE}"
                        }
                    }
                }
            }
        }
    }
}
